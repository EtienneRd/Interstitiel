<?php
/**
 * @file
 * Code for the Interstitiel feature.
 */

include_once 'interstitiel.features.inc';

// Create a variable to store the path to this module
define('INTERSTITIEL_PATH', drupal_get_path('module', 'interstitiel'));

function interstitiel_menu() {
  $items = array();

  $items['ajax/interstitiel'] = array(
    'page callback' => 'interstitiel_ajax_displaybypage',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_node_presave().
 */
function interstitiel_node_presave($node) {
  if ($node->type == 'interstitiel') {
    if ($node->status != 1) {
      _interstitiel_log_purgedatabase($node->nid);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function interstitiel_node_delete($node) {
  if ($node->type == 'interstitiel') {
    _interstitiel_log_purgedatabase($node->nid);
    _interstitiel_clearcache($node);
  }
}

/**
 * Implements hook_block_info().
 */
function interstitiel_block_info() {
  $blocks['interstitiel'] = array(
    'info' => t('Interstitiel container'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function interstitiel_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'interstitiel':
      $block = array(
        'subject' => NULL,
        'content' => interstitiel_display_block_interstitiel(),
      );
      break;
  }
  return $block;
}

function interstitiel_display_block_interstitiel() {
  $content = array();

  // Adding JS and CSS
  $content['#attached'] = array(
    'js' => array(
      array(
        'data' => INTERSTITIEL_PATH . '/js/interstitiel.js',
        'type' => 'file',
      ),
      array(
        'data' => INTERSTITIEL_PATH . '/js/jquery.cookie.js',
        'type' => 'file',
      ),
    ),
    'css' => array(
      INTERSTITIEL_PATH . '/css/styles.css',
    )
  );

  // print comment to force block to display
  $content['#markup'] = '<!-- interstitiel -->';

  return $content;
}

/**
 * Implements hook_theme_registry_alter()
 * Adds interstitiel tpls to registry
 */
function interstitiel_theme_registry_alter(&$theme_registry) {
  global $theme;
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', $theme, INTERSTITIEL_PATH);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  // A list of templates the module will provide templates for
  $hooks = array('block');
  foreach ($hooks as $h) {
    // Add the key 'theme paths' if it doesn't exist in this theme's registry
    if (!isset($theme_registry[$h]['theme paths'])) {
      $theme_registry[$h]['theme paths'] = array();
    }
    //Shift this module's directory to the top of the theme path list
    if (is_array($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      if ($first_element) {
        array_unshift($theme_registry[$h]['theme paths'], $first_element, INTERSTITIEL_PATH);
      }
      else {
        array_unshift($theme_registry[$h]['theme paths'], INTERSTITIEL_PATH);
      }
    }
  }
}

/**
 * Ajax interstitiel block callback
 * @param $encodePath
 */
function interstitiel_ajax_displaybypage() {
  global $language;
  $output = array();
  $display = FALSE;
  $node = FALSE;

  if (!empty($_GET['interstitiel_arg'])) {
    $current_url = urldecode($_GET['interstitiel_arg']);
  }
  else {
    $current_url = '';
  }

  // Get all interstitiel content
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'interstitiel')
    ->propertyCondition('status', 1, '=') //published
    ->propertyCondition('promote', 1, '=') // and promoted
    ->propertyCondition('language', $language->language, '=')
    ->propertyOrderBy('created', 'DESC');

  $results = $query->execute();

  foreach ($results['node'] as $nid => $result) {

    // Checks rights for the node to be displayed
    $node = node_load($nid);
    if (node_access('view', $node)) {

      // Define which language parameter to apply to fields
      $lang = !empty($node->field_interstl_persistence[$language->language]) ? $language->language : LANGUAGE_NONE;

      $path = drupal_get_path_alias($current_url);

      if ($path == '<front>') {
        $path = variable_get('site_frontpage', 'node');
      }

      // Compare with the internal and path alias (if any).
      $page_match = drupal_match_path($path, (!empty($node->field_interstl_displayonpages[$lang][0]['value']) ?
        $node->field_interstl_displayonpages[$lang][0]['value'] : ''));

      $page_nodisplay_match = drupal_match_path($path, (!empty($node->field_interstl_notdisplayonpages[$lang][0]['value']) ?
        $node->field_interstl_notdisplayonpages[$lang][0]['value'] : ''));

      if ($path != $current_url && !$page_match) {
        $page_match = drupal_match_path($current_url, (!empty($node->field_interstl_displayonpages[$lang][0]['value']) ?
          $node->field_interstl_displayonpages[$lang][0]['value'] : ''));

        $page_nodisplay_match = drupal_match_path($current_url, (!empty($node->field_interstl_notdisplayonpages[$lang][0]['value']) ?
          $node->field_interstl_notdisplayonpages[$lang][0]['value'] : ''));
      }

      if (($page_match || empty($node->field_interstl_displayonpages[$lang][0]['value'])) && !$page_nodisplay_match) {
        // Affichage en teaser
        $output[] = node_view($node, 'full'); // On retourne le premier interstitiel correspondant trouvÃ©
        $display = !empty($node->field_interstl_persistence[$lang][0]['value']) ? $node->field_interstl_persistence[$lang][0]['value'] : 'first';
      }
    }
  }

  drupal_json_output(array(
    'display' => $display,
    'ad' => (is_object($node) ? $node->nid : FALSE),
    'html' => render($output)
  ));
}

// @TODO: find what it what used for
/*function interstitiel_ajax_displaybyvisitor($nid) {
  $ad = TRUE;
  $ip = $_SERVER['REMOTE_ADDR'];

  // CHECK how many times we can display interstitial
  $sql = "SELECT cti.field_interstl_persistence_value FROM {content_type_interstitiel} cti WHERE cti.nid=:nid";
  $result = db_query($sql, array(':nid' => $nid));
  if (!empty($result)) {
    $persistence = $result['field_interstl_persistence_value'];

    if (!empty($ip)) {
      $sql = 'SELECT il.nid FROM {interstitiel_log} il WHERE il.nid=:nid AND il.ip=\':ip\'';
      $result = db_query($sql, array(':nid' => $nid, ':ip' => $ip));
      if ($result) {
        $sql = 'UPDATE {interstitiel_log} SET datetime=\':date\' WHERE ip=\':ip\' AND nid=:nid';
        if ($persistence == 'first') {
          $ad = FALSE;
        }
      }
      else {
        $sql = 'INSERT INTO {interstitiel_log} (datetime, ip, nid) VALUES (\':date\',\':ip\', :nid)';
        $ad = TRUE;
      }
      db_query($sql, array(':date' => time(), ':ip' => $ip, ':nid' => $nid));
    }
    else {
      $ad = TRUE;
    }
    if (isset($_SESSION['interstitiel'][$nid])) {
      if ($persistence == 'first') {
        $ad = FALSE;
      }
      else {
        $ad = TRUE;
      }
    }
    else {
      $_SESSION['interstitiel'][$nid] = TRUE;
    }
  }
  else {
    $ad = FALSE;
  }

  drupal_json_output(array('ad' => $ad));
}*/

function _interstitiel_log_purgedatabase($nid) {
  db_query('DELETE FROM {interstitiel_log} WHERE nid=:nid', array(':nid' => $nid));
}

function _interstitiel_clearcache($node) {
  global $base_url;

  // @TODO: test with boost d7
  /*if (module_exists('boost_clearcache')) {
    $paths = boost_clearcache_getpaths_fromfield($node, 'field_interstl_displayonpages');
    boost_clearcache_clear($paths);
  }*/

  // @TODO: test with domain d7
  /*$domains = array($base_url);

  // Delete for each domain language
  $languages = language_list();
  foreach ($languages as $lang) {
    if (!empty($lang->domain)) {
      $domains[] = $lang->domain;
    }
  }

  if (module_exists('domain')) {
    $domain_domains = domain_domains();
    foreach ($domain_domains as $domain) {
      $domains[] = preg_replace('/^(.+)\/$/', '$1', domain_get_path($domain));
      if (!empty($domain['aliases'])) {
        foreach ($domain['aliases'] as $domain_alias) {
          $domains[] = 'http://' . $domain_alias['pattern'];
        }
      }
    }

  }*/ // module_exists('domain')

  $paths = array();
  $paths_display = interstitiel_getpaths_fromfield($node, 'field_interstl_displayonpages');
  if (empty($paths_display)) { // clear all pages
    cache_clear_all('*', 'cache_page', TRUE);
  }
  else { // Only clear specific paths
    $paths_nodisplay = interstitiel_getpaths_fromfield($node, 'field_interstl_notdisplayonpages');
    $paths += $paths_display + $paths_nodisplay;

    //foreach ($domains as $domain) {
    foreach ($paths as $path) {
      $path = preg_replace("/^(.+)%0D$/", "$1", urlencode($path));
      cache_clear_all(base_path() . 'ajax/interstitiel/' . $path, 'cache_page');
    }
    //}
  }
}


/**
 * Get new and old values, to clear cache of old referenced pages
 * @param $node
 * @param $fieldname
 * @return array
 */
function interstitiel_getpaths_fromfield($node, $fieldname) {
  $old_paths = $new_paths = $paths = array();

  // Get field values after form submission
  foreach ($node->{$fieldname} as $values) {
    $new_paths += explode("\n", $values['value']);
  }

  // get old field values before form submission
  $old_node = node_load($node->nid);
  foreach ($old_node->{$fieldname} as $values) {
    $old_paths += explode("\n", $values['value']);
  }

  $paths = array_unique(array_merge($new_paths, $old_paths));

  return array_filter($paths);
} // interstitiel_getpaths_fromfield