<?php

function interstitiel_menu(){
  $items = array();

  $items['ajax/interstitiel/%'] = array(
    'page callback' => 'interstitiel_ajax_displaybypage',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}

function interstitiel_init() {
	drupal_add_js(drupal_get_path('module', 'interstitiel') . '/js/interstitiel.js', 'module');
	drupal_add_js(drupal_get_path('module', 'interstitiel') . '/js/jquery.cookie.js', 'module');
}

function interstitiel_nodeapi(&$node, $op, $teaser = NULL, $page = NULL){
  if($node->type == 'interstitiel'){
    switch($op){
      case 'presave':
      	
        if($node->status != 1){
          _interstitiel_log_purgedatabase($node->nid);
        }
        _interstitiel_clearcache($node);
        
        break;
      case 'delete':
        _interstitiel_log_purgedatabase($node->nid);
        _interstitiel_clearcache($node);
        break;
    }
  }
}

function interstitiel_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['interstitiel'] = array(
      'info' => t('Interstitiel container'),
      'weight' => 100,
      'status' => 1,
      'region' => 'footer',
      'cache' => BLOCK_CACHE_PER_PAGE,
    );

    return $blocks;
  }
  else if ($op == 'configure' && $delta == 0) {
// CONFIGURE
  }
  else if ($op == 'save' && $delta == 0) {
// SAVE CONFIGURATION
  }
  else if ($op == 'view') {
    $block = array();
    switch ($delta) {
      case 'interstitiel':
        // Your module will need to define this function to render the block.
        $block = array(
          'subject' => t('Interstitial'),
          'content' => interstitiel_display_block_interstitiel(),
        );
        break;
    }
    return $block;
  }
}

function interstitiel_display_block_interstitiel(){
  /*global $_domain;
  global $language;

  $current_url = $_GET["q"];
*/
   /**
    *	Select all ubox node to check which can be display
    */
/*  $query_domain = $where_domain = "";
  if(!empty($_domain)){
    $query_domain = "
      LEFT JOIN {domain_access} d ON n.nid = d.nid
    ";
    $where_domain = " AND (d.gid = %d AND d.realm = 'domain_id')
    ";
  }
  $query = "SELECT n.nid AS nid, cti.field_displayonpages_value, cti.field_notdisplayonpages_value
 FROM {node} n
 LEFT JOIN {content_type_interstitiel} cti ON n.vid = cti.vid".$query_domain."
 WHERE n.status <> 0
 AND n.type = 'interstitiel'
 AND (n.language = '%s' OR n.language = '')
 ".$where_domain."
 ORDER BY n.nid DESC";

  if(empty($query_domain)){
    $result = db_query($query, $language->language);
  }else{
    $result = db_query($query, $language->language, $_domain['domain_id']);
  }

  while( $interstitiel = db_fetch_object($result)){

    // Vérifie que l'ubox à les droits d'être affichée

    $node = node_load($interstitiel->nid);
    if(node_access('view', $node )){*/
      /**
       *	Pour chaque ubox récupéré, on vérifie qu'elle peut être affichée
       * 	(prise en compte des wildcards)
       */
/*      $path = drupal_get_path_alias($current_url);

      // Compare with the internal and path alias (if any).
      $page_match = drupal_match_path($path, $interstitiel->field_displayonpages_value);
      $page_nodisplay_match = drupal_match_path($path, $interstitiel->field_notdisplayonpages_value);
      if ($path != $current_url && !$page_match) {
        $page_match = drupal_match_path($current_url, $interstitiel->field_displayonpages_value);
        $page_nodisplay_match = drupal_match_path($current_url, $interstitiel->field_notdisplayonpages_value);
      }
      
      if(($page_match || empty($interstitiel->field_displayonpages_value)) &&  !$page_nodisplay_match){
*/
        /**
        * On ajoute l'affichage du node
        */
/*        drupal_add_js(array('interstitiel' => array('ad'=>$node->nid)), 'setting');

        return node_view($node); // On retourne le premier interstitiel correspondant trouvé
      }
    }
  }*/

  return '<!-- interstitiel -->'; // print comment to force block to display
}

function interstitiel_ajax_displaybypage($encodePath){
	global $_domain;
  global $language;
  $output = "";
  $display = "";

  $current_url = urldecode($encodePath);

   /**
    *	Select all ubox node to check which can be display
    */
  $query_domain = $where_domain = "";
  if(!empty($_domain)){
    $query_domain = "
      LEFT JOIN {domain_access} d ON n.nid = d.nid
    ";
    $where_domain = " AND (d.gid = %d AND d.realm = 'domain_id')
    ";
  }
  $query = "SELECT n.nid AS nid, cti.field_displayonpages_value, cti.field_notdisplayonpages_value, cti.field_persistence_value
 FROM {node} n
 LEFT JOIN {content_type_interstitiel} cti ON n.vid = cti.vid".$query_domain."
 WHERE n.status <> 0
 AND n.type = 'interstitiel'
 AND (n.language = '%s' OR n.language = '')
 ".$where_domain."
 ORDER BY n.nid DESC";

  if(empty($query_domain)){
    $result = db_query($query, $language->language);
  }else{
    $result = db_query($query, $language->language, $_domain['domain_id']);
  }

  while( $interstitiel = db_fetch_object($result)){

    // Vérifie que l'ubox à les droits d'être affichée

    $node = node_load($interstitiel->nid);
    if(node_access('view', $node )){
      /**
       *	Pour chaque ubox récupéré, on vérifie qu'elle peut être affichée
       * 	(prise en compte des wildcards)
       */
      $path = drupal_get_path_alias($current_url);
      
      if($path == '<front>') {
	      $path = variable_get('site_frontpage', 'node');
	    }

      // Compare with the internal and path alias (if any).
      $page_match = drupal_match_path($path, $interstitiel->field_displayonpages_value);
      $page_nodisplay_match = drupal_match_path($path, $interstitiel->field_notdisplayonpages_value);
      if ($path != $current_url && !$page_match) {
        $page_match = drupal_match_path($current_url, $interstitiel->field_displayonpages_value);
        $page_nodisplay_match = drupal_match_path($current_url, $interstitiel->field_notdisplayonpages_value);
      }
      
      if(($page_match || empty($interstitiel->field_displayonpages_value)) &&  !$page_nodisplay_match){

        // Affichage en teaser
        $output = node_view($node, TRUE); // On retourne le premier interstitiel correspondant trouvé
        
        $display = $interstitiel->field_persistence_value;
        
        break;
      }
    }
  }
  
  print drupal_json(array('display' => $display, 'ad' => $interstitiel->nid, 'html' => $output));
}

function interstitiel_ajax_displaybyvisitor($nid){
  $ad = TRUE;
  $ip = $_SERVER['REMOTE_ADDR'];

  // CHECK how many times we can display interstitial
  $sql = "SELECT cti.field_persistence_value FROM {content_type_interstitiel} cti WHERE cti.nid=%d";
  $query = db_query($sql, $nid);
  if($result = db_fetch_object($query)){
    $persistence = $result->field_persistence_value;

    if(!empty($ip)){
      $sql = "SELECT il.nid FROM {interstitiel_log} il WHERE il.nid=%d AND il.ip='%s'";
      $query = db_query($sql, $nid, $ip);
      if($result = db_fetch_object($query)){
        $sql = "UPDATE {interstitiel_log} SET datetime='%s' WHERE ip='%s' AND nid=%d";
        if($persistence == 'first'){
          $ad = FALSE;
        }
      }else{
        $sql = "INSERT INTO {interstitiel_log} (datetime, ip, nid) VALUES ('%s','%s', %d)";
        $ad = TRUE;
      }
      db_query($sql, time(), $ip, $nid);
    }else{
      $ad = TRUE;
    }
    if(isset($_SESSION['interstitiel'][$nid])){
      if($persistence == 'first'){
        $ad = FALSE;
      }else{
        $ad = TRUE;
      }
    }else{
      $_SESSION['interstitiel'][$nid] = TRUE;
    }
  }else{
    $ad = FALSE;
  }

  return drupal_json(array('ad'=>$ad));
}

function _interstitiel_log_purgedatabase($nid){
  db_query("DELETE FROM {interstitiel_log} WHERE nid=%d", $nid);
}

function _interstitiel_clearcache($node) {
	global $base_url;

  if(module_exists('boost_clearcache')){
    $paths = boost_clearcache_getpaths_fromfield($node, 'field_displayonpages');
    boost_clearcache_clear($paths);
  }
  
  $domains = array($base_url);
  
  // Delete for each domain language
  $languages = language_list();
  foreach($languages as $lang){
    if(!empty($lang->domain)){
      $domains[] = $lang->domain;
    }
  }

  if(module_exists('domain')){
    $domain_domains = domain_domains();
    foreach($domain_domains as $domain){
      $domains[] = preg_replace('/^(.+)\/$/','$1',domain_get_path($domain));
      if(!empty($domain['aliases'])){
        foreach($domain['aliases'] as $domain_alias){
          $domains[] = 'http://'.$domain_alias['pattern'];
        }
      }
    }

  } // module_exists('domain')
  
  $paths = array();
  $paths_display = interstitiel_getpaths_fromfield($node, 'field_displayonpages');
  if(empty($paths_display)) { // clear all pages
  	cache_clear_all('*', 'cache_page', true);
  }
  else { // Only clear specific paths
  	$paths_nodisplay = interstitiel_getpaths_fromfield($node, 'field_notdisplayonpages');
  	$paths += $paths_display + $paths_nodisplay;
  
	  foreach($domains as $domain) {
		  
		  //cache_clear_all($domain . base_path() . 'ajax/interstitiel/'.$node->nid, 'cache_page', true);
		  
		  foreach($paths as $path) {
		  	$path = preg_replace("/^(.+)%0D$/", "$1", urlencode($path));
		    cache_clear_all($domain . base_path() . 'ajax/interstitiel/'. $path, 'cache_page');
		  }
		}
  }
}


/**
 * Get new and old values, to clear cache of old referenced pages
 * @param $node
 * @param $field
 * @return array
 */
function interstitiel_getpaths_fromfield($node, $fieldname){
  $old_paths = $new_paths = $paths = array();

  // Get field values after form submission
  foreach($node->{$fieldname} as $values){
    $new_paths += explode("\n", $values['value']);
  }

  // get old field values before form submission
	$old_node = node_load($node->nid);
  foreach($old_node->{$fieldname} as $values){
    $old_paths += explode("\n", $values['value']);
  }

  $paths = array_unique(array_merge($new_paths, $old_paths));

  return array_filter($paths);
} // interstitiel_getpaths_fromfield